name: build

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual triggering from the GitHub UI

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
      
    - name: Build Windows executable
      run: |
        python build.py --target-platform windows --target-arch x64 --onefile --portable --clean
      
    - name: List build artifacts
      run: |
        echo "Contents of dist directory:"
        dir dist
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kp-dashboard-windows
        path: |
          dist/*.exe
          dist/KPAstrologyDashboard-*.zip
        retention-days: 7
  
  build-macos-universal:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
      
    - name: Print system information
      run: |
        echo "macOS version: $(sw_vers -productVersion)"
        echo "Architecture: $(uname -m)"
        python -c "import platform; print(f'Python architecture: {platform.machine()}')"
      
    - name: Build macOS Universal executable
      run: |
        python build.py --target-platform macos --target-arch auto --portable --clean
      
    - name: List build artifacts
      run: |
        echo "Contents of dist directory:"
        ls -la dist/
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kp-dashboard-macos
        path: |
          dist/*
        retention-days: 7

  # This job creates a GitHub release with all artifacts when a tag is pushed
  create-release:
    name: Create Release
    needs: [build-windows, build-macos-universal]
    # Run this job on both tag pushes and workflow_dispatch (manual triggers)
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags for generating release notes
      
      - name: Debug ref name
        run: |
          echo "GitHub ref: ${{ github.ref }}"
          echo "Event name: ${{ github.event_name }}"
          
      - name: Download all workflow artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
          
      - name: Prepare artifacts for release
        run: |
          mkdir -p release-artifacts
          # Copy all binary artifacts to the release directory
          find all-artifacts -type f -not -path "*/\.*" | xargs -I{} cp -v {} release-artifacts/ || true
          # List what we've collected
          echo "Contents of release-artifacts directory:"
          ls -la release-artifacts/
      
      # For workflow_dispatch, create a draft release with the current date    
      - name: Get current date
        if: github.event_name == 'workflow_dispatch'
        id: date
        run: echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          
      - name: Extract version from tag or use date
        id: get_version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "IS_DRAFT=false" >> $GITHUB_OUTPUT
          else
            echo "VERSION=build-${{ steps.date.outputs.DATE }}" >> $GITHUB_OUTPUT
            echo "IS_DRAFT=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: KP Astrology Dashboard ${{ steps.get_version.outputs.VERSION }}
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || steps.get_version.outputs.VERSION }}
          draft: ${{ steps.get_version.outputs.IS_DRAFT }}
          prerelease: false
          generate_release_notes: true  # Automatically generate notes based on commits
          files: |
            release-artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 