name: Build Cross-Platform Applications

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual triggering from the GitHub UI

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
      
    - name: Build Windows executable
      run: |
        python build.py --target-platform windows --target-arch x64 --onefile --portable --clean
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kp-dashboard-windows
        path: |
          dist/*.exe
          dist/KPAstrologyDashboard-*.zip
        retention-days: 7
  
  build-macos-x64:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
      
    - name: Build macOS Intel executable
      run: |
        python build.py --target-platform macos --target-arch x64 --onefile --portable --clean
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kp-dashboard-macos-x64
        path: |
          dist/*.app
          dist/*.zip
          dist/KPAstrologyDashboard-*
        retention-days: 7
  
  build-macos-arm64:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
      
    - name: Build macOS Apple Silicon executable
      run: |
        # Set environment variables to target arm64
        export MACOSX_DEPLOYMENT_TARGET=11.0
        export ARCHFLAGS="-arch arm64"
        
        # Build for Apple Silicon
        python build.py --target-platform macos --target-arch arm64 --onefile --portable --clean
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kp-dashboard-macos-arm64
        path: |
          dist/*.app
          dist/*.zip
          dist/KPAstrologyDashboard-*
        retention-days: 7
  
  build-linux-x64:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libegl1 libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xkb1 libxkbcommon-x11-0
        pip install -r requirements.txt
      
    - name: Build Linux x64 executable
      run: |
        python build.py --target-platform linux --target-arch x64 --onefile --portable --clean
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kp-dashboard-linux-x64
        path: |
          dist/*
        retention-days: 7
  
  build-linux-arm64:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      with:
        platforms: arm64
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build in ARM64 Docker container
      run: |
        docker run --rm --platform linux/arm64 -v ${{ github.workspace }}:/app -w /app arm64v8/python:3.9-slim bash -c "
          python -m pip install --upgrade pip &&
          pip install pyinstaller &&
          apt-get update &&
          apt-get install -y libgl1-mesa-glx libegl1 libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xkb1 libxkbcommon-x11-0 &&
          pip install -r requirements.txt &&
          python build.py --target-platform linux --target-arch arm64 --onefile --portable --clean
        "
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kp-dashboard-linux-arm64
        path: |
          dist/*
        retention-days: 7

  # This job creates a GitHub release with all artifacts when a tag is pushed
  create-release:
    name: Create Release
    needs: [build-windows, build-macos-x64, build-macos-arm64, build-linux-x64, build-linux-arm64]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags for generating release notes
          
      - name: Download all workflow artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
          
      - name: Prepare artifacts for release
        run: |
          mkdir -p release-artifacts
          # Copy all binary artifacts to the release directory
          find all-artifacts -type f -name "*.exe" -o -name "*.zip" -o -name "*.app" | xargs -I{} cp {} release-artifacts/
          # List what we've collected
          ls -la release-artifacts/
          
      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: KP Astrology Dashboard ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true  # Automatically generate notes based on commits
          files: |
            release-artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 