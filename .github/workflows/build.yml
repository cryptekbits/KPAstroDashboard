name: build

on:
  push:
    branches: [ develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:  # Allows manual triggering from the GitHub UI

jobs:
  # This initial job will determine if the current commit already has a tag
  # to avoid running duplicate workflows
  check-conditions:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      has_tag: ${{ steps.check.outputs.has_tag }}
      tag_name: ${{ steps.check.outputs.tag_name }}
      version: ${{ steps.check.outputs.version }}
      is_develop: ${{ steps.check.outputs.is_develop }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history to properly check tags
    
    - name: Check if we should run this workflow
      id: check
      run: |
        # Check if this is a develop branch build
        IS_DEVELOP=false
        if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          IS_DEVELOP=true
        fi
        echo "is_develop=$IS_DEVELOP" >> $GITHUB_OUTPUT
        
        # If this is a pull request or manual trigger, always run
        if [[ "${{ github.event_name }}" == "pull_request" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "has_tag=false" >> $GITHUB_OUTPUT
          echo "tag_name=" >> $GITHUB_OUTPUT
          echo "version=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # If this is a tag push directly, always run
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "has_tag=true" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # If this is a develop branch push, we should run the workflow
        if [[ "$IS_DEVELOP" == "true" ]]; then
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "has_tag=false" >> $GITHUB_OUTPUT
          echo "tag_name=" >> $GITHUB_OUTPUT
          echo "version=$(date +'%Y.%m.%d')-dev" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # If this is a branch push (master/main), check if this commit already has a tag
        COMMIT_SHA="${{ github.sha }}"
        TAG_AT_COMMIT=$(git tag --points-at $COMMIT_SHA)
        
        if [[ -n "$TAG_AT_COMMIT" && "$TAG_AT_COMMIT" == v* ]]; then
          # This commit already has a version tag - should only build in response to the tag
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "has_tag=true" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_AT_COMMIT" >> $GITHUB_OUTPUT
          echo "version=${TAG_AT_COMMIT#v}" >> $GITHUB_OUTPUT
        else
          # No tag, and it's not develop branch - we should NOT run the workflow
          echo "should_run=false" >> $GITHUB_OUTPUT
          echo "has_tag=false" >> $GITHUB_OUTPUT
          echo "tag_name=" >> $GITHUB_OUTPUT
          echo "version=0.0.0" >> $GITHUB_OUTPUT
        fi

  create-source-code-zip:
    name: Create Source Code Package
    needs: check-conditions
    if: needs.check-conditions.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Create source code zip
      run: |
        # Create a directory for the source code
        mkdir -p source-code
        
        # Copy all files except excluded ones
        rsync -av --exclude='.git' --exclude='venv' --exclude='__pycache__' \
              --exclude='build' --exclude='dist' --exclude='logs' \
              --exclude='.DS_Store' --exclude='*.pyc' \
              . source-code/
        
        # Create the zip file
        cd source-code
        zip -r ../KPAstrologyDashboard-${{ needs.check-conditions.outputs.version }}.zip .
        cd ..
        
        echo "Created source code zip:"
        ls -la KPAstrologyDashboard-${{ needs.check-conditions.outputs.version }}.zip
    
    - name: Upload source code zip
      uses: actions/upload-artifact@v4
      with:
        name: source-code
        path: KPAstrologyDashboard-${{ needs.check-conditions.outputs.version }}.zip
        retention-days: 7
        
  prepare-installers:
    name: Prepare Installation Scripts
    needs: check-conditions
    if: needs.check-conditions.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Update installation scripts with correct version
      run: |
        # Get the version
        VERSION="${{ needs.check-conditions.outputs.version }}"
        
        # Update the Windows script with the version
        sed -i "s/##VERSION##/$VERSION/g" install_windows.bat
        
        # Update the macOS script with the version
        sed -i "s/##VERSION##/$VERSION/g" install_macos.sh
        
        # Make macOS script executable
        chmod +x install_macos.sh
    
    - name: Update Windows PowerShell script with correct version
      run: |
        VERSION="${{ needs.check-conditions.outputs.version }}"
        sed -i "s/##VERSION##/$VERSION/g" install_windows.ps1
    
    - name: Upload Windows installer
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: install_windows.bat
        retention-days: 7
        
    - name: Upload macOS installer
      uses: actions/upload-artifact@v4
      with:
        name: macos-installer
        path: install_macos.sh
        retention-days: 7
    
    - name: Upload Windows PowerShell installer
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer-ps
        path: install_windows.ps1
        retention-days: 7

  # This job creates a GitHub release with all artifacts when a tag is pushed
  create-release:
    name: Create Release
    needs: [check-conditions, prepare-installers]
    # Run this job if a tag is present or on manual trigger, but not for develop branch
    if: (needs.check-conditions.outputs.has_tag == 'true' || github.event_name == 'workflow_dispatch') && needs.check-conditions.outputs.is_develop != 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags for generating release notes
      
      # Download each artifact explicitly to ensure they're available
      - name: Download source code artifact
        uses: actions/download-artifact@v4
        with:
          name: source-code
          path: artifact-source-code
      
      - name: Download Windows installer artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-installer
          path: artifact-windows-installer
      
      - name: Download macOS installer artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-installer
          path: artifact-macos-installer
      
      - name: Download Windows PowerShell installer artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-installer-ps
          path: artifact-windows-installer-ps
      
      - name: Download all workflow artifacts
        id: download-all
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
          
      - name: Debug artifacts
        run: |
          echo "Listing all downloaded artifacts:"
          find all-artifacts -type f | sort
          echo "Listing explicitly downloaded artifacts:"
          echo "Source code:"
          find artifact-source-code -type f | sort
          echo "Windows installer:"
          find artifact-windows-installer -type f | sort
          echo "macOS installer:"
          find artifact-macos-installer -type f | sort
          echo "Windows PS installer:"
          find artifact-windows-installer-ps -type f | sort
          
      - name: Prepare artifacts for release
        id: prepare-artifacts
        run: |
          mkdir -p release-artifacts
          
          # Rename artifacts with version number
          VERSION="${{ needs.check-conditions.outputs.version }}"
          
          # Source code ZIP
          echo "Preparing source code ZIP..."
          if [ -f "artifact-source-code/KPAstrologyDashboard-${VERSION}.zip" ]; then
            cp artifact-source-code/KPAstrologyDashboard-${VERSION}.zip release-artifacts/
            echo "Source code ZIP copied successfully"
          else
            echo "WARNING: Source code ZIP not found in explicit artifact"
            # Try the combined artifacts directory as fallback
            find all-artifacts -name "*.zip" | grep -v "Windows.zip" | head -1 | xargs -I{} cp {} release-artifacts/KPAstrologyDashboard-${VERSION}.zip || echo "No source code ZIP found in all-artifacts"
          fi
          
          # Installer scripts
          echo "Preparing installer scripts..."
          # Windows installer (batch)
          if [ -f "artifact-windows-installer/install_windows.bat" ]; then
            cp artifact-windows-installer/install_windows.bat release-artifacts/KPAstrologyDashboard-Windows-Installer.bat
            echo "Windows installer copied successfully"
          else 
            find all-artifacts -name "*.bat" | head -1 | xargs -I{} cp {} release-artifacts/KPAstrologyDashboard-Windows-Installer.bat || echo "No Windows batch installer found"
          fi

          # macOS installer (sh)
          if [ -f "artifact-macos-installer/install_macos.sh" ]; then
            cp artifact-macos-installer/install_macos.sh release-artifacts/KPAstrologyDashboard-macOS-Installer.sh
            chmod +x release-artifacts/KPAstrologyDashboard-macOS-Installer.sh
            echo "macOS installer copied successfully"
          else
            find all-artifacts -name "*.sh" | head -1 | xargs -I{} cp {} release-artifacts/KPAstrologyDashboard-macOS-Installer.sh || echo "No macOS installer found"
            if [ -f "release-artifacts/KPAstrologyDashboard-macOS-Installer.sh" ]; then
              chmod +x release-artifacts/KPAstrologyDashboard-macOS-Installer.sh
            fi
          fi

          # Prepare Windows PowerShell installer
          echo "Preparing Windows PowerShell installer..."
          if [ -f "artifact-windows-installer-ps/install_windows.ps1" ]; then
            cp artifact-windows-installer-ps/install_windows.ps1 release-artifacts/KPAstrologyDashboard-Windows-Installer.ps1
            echo "Windows PowerShell installer copied successfully"
          else
            find all-artifacts -name "*.ps1" | head -1 | xargs -I{} cp {} release-artifacts/KPAstrologyDashboard-Windows-Installer.ps1 || echo "No Windows PowerShell installer found"
          fi
          
          # Windows executable
          echo "Skipping Windows executable and ZIP artifact copy as Windows build has been removed."
          
          # Create a macOS .command file (which is double-clickable)
          echo "Creating double-clickable macOS installer..."
          if [ -f "release-artifacts/KPAstrologyDashboard-macOS-Installer.sh" ]; then
            cp release-artifacts/KPAstrologyDashboard-macOS-Installer.sh release-artifacts/KPAstrologyDashboard-macOS-Installer.command
            chmod +x release-artifacts/KPAstrologyDashboard-macOS-Installer.command
            echo "Created double-clickable macOS installer: KPAstrologyDashboard-macOS-Installer.command"
          else
            echo "No macOS installer found, skipping .command file creation"
          fi
          
          # List what we've collected
          echo "Contents of release-artifacts directory:"
          ls -la release-artifacts/
          # Set outputs for the next step
          echo "release_dir=$(pwd)/release-artifacts" >> $GITHUB_OUTPUT
          echo "num_artifacts=$(find release-artifacts -type f | wc -l)" >> $GITHUB_OUTPUT
       
      - name: Verify artifacts before release
        run: |
          echo "Verifying release artifacts..."
          FILES_COUNT=$(find release-artifacts -type f | wc -l)
          echo "Found $FILES_COUNT files to include in release"
          
          if [ $FILES_COUNT -lt 4 ]; then
            echo "WARNING: Expected at least 4 release artifacts but found only $FILES_COUNT"
            echo "This may indicate a problem with artifact preparation"
          fi
          
          for file in release-artifacts/*; do
            echo "Checking $file ($(stat -c %s "$file") bytes)"
            if [ ! -s "$file" ]; then
              echo "WARNING: $file is empty!"
            fi
          done

      - name: Create Release
        uses: softprops/action-gh-release@v2
        id: create-release
        with:
          name: 'KP Astrology Dashboard ${{ needs.check-conditions.outputs.version }}'
          tag_name: ${{ needs.check-conditions.outputs.tag_name }}
          draft: ${{ needs.check-conditions.outputs.has_tag != 'true' }}
          prerelease: false
          generate_release_notes: true  # Automatically generate notes based on commits
          make_latest: true
          fail_on_unmatched_files: true
          files: |
            release-artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Verify release creation
        if: steps.create-release.outcome == 'success'
        run: |
          echo "Release created successfully!"
          echo "Release URL: ${{ steps.create-release.outputs.url }}"
      
      - name: Handle release creation failure
        if: steps.create-release.outcome != 'success'
        run: |
          echo "Failed to create release!"
          echo "This might be due to issues with the artifact files or GitHub permissions."
          exit 1 