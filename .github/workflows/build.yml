name: build

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual triggering from the GitHub UI

jobs:
  # This initial job will determine if the current commit already has a tag
  # to avoid running duplicate workflows
  check-conditions:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      has_tag: ${{ steps.check.outputs.has_tag }}
      tag_name: ${{ steps.check.outputs.tag_name }}
      version: ${{ steps.check.outputs.version }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history to properly check tags
    
    - name: Check if we should run this workflow
      id: check
      run: |
        # If this is a pull request or manual trigger, always run
        if [[ "${{ github.event_name }}" == "pull_request" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "has_tag=false" >> $GITHUB_OUTPUT
          echo "tag_name=" >> $GITHUB_OUTPUT
          echo "version=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # If this is a tag push directly, always run
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "has_tag=true" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # If this is a branch push, check if this commit already has a tag
        COMMIT_SHA="${{ github.sha }}"
        TAG_AT_COMMIT=$(git tag --points-at $COMMIT_SHA)
        
        if [[ -n "$TAG_AT_COMMIT" && "$TAG_AT_COMMIT" == v* ]]; then
          # This commit already has a version tag, and we'll likely get another workflow from the tag push
          # So we'll skip this run to avoid duplication
          echo "should_run=false" >> $GITHUB_OUTPUT
          echo "has_tag=true" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_AT_COMMIT" >> $GITHUB_OUTPUT
          echo "version=${TAG_AT_COMMIT#v}" >> $GITHUB_OUTPUT
        else
          # No tag, so we should run the workflow
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "has_tag=false" >> $GITHUB_OUTPUT
          echo "tag_name=" >> $GITHUB_OUTPUT
          echo "version=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT
        fi

  build-windows:
    needs: check-conditions
    if: needs.check-conditions.outputs.should_run == 'true'
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
      
    - name: Build Windows executable
      run: |
        python build.py --target-platform windows --target-arch x64 --onefile --portable --clean --no-zip
      env:
        POLARS_SKIP_CPU_CHECK: 1
      
    - name: List build artifacts
      run: |
        echo "Contents of dist directory:"
        dir dist
      
    - name: Upload Windows executable
      uses: actions/upload-artifact@v4
      with:
        name: windows-exe
        path: dist/*.exe
        retention-days: 7
  
  build-macos:
    needs: check-conditions
    if: needs.check-conditions.outputs.should_run == 'true'
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
      
    - name: Print system information
      run: |
        echo "macOS version: $(sw_vers -productVersion)"
        echo "Architecture: $(uname -m)"
        python -c "import platform; print(f'Python architecture: {platform.machine()}')"
      
    - name: Build macOS application
      run: |
        python build.py --target-platform macos --target-arch auto --portable --clean --no-zip
      
    - name: Check app bundle
      run: |
        echo "Contents of dist directory:"
        ls -la dist/
        echo "Looking for .app directories:"
        find dist -name "*.app" -type d
      
    - name: Create DMG for macOS
      run: |
        # Install create-dmg tool
        brew install create-dmg
        
        cd dist
        APP_PATH=$(find . -name "*.app" -type d | head -1)
        if [ -n "$APP_PATH" ]; then
          echo "Creating DMG for $APP_PATH"
          
          # Create a DMG file
          create-dmg \
            --volname "AstroInsight Installer" \
            --volicon "$APP_PATH/Contents/Resources/icon-windowed.icns" \
            --window-pos 200 120 \
            --window-size 800 500 \
            --icon-size 100 \
            --icon "$APP_PATH" 200 190 \
            --hide-extension "$APP_PATH" \
            --app-drop-link 600 185 \
            "AstroInsight-macOS.dmg" \
            "$APP_PATH" || echo "DMG creation failed, continuing anyway"
          
          ls -la AstroInsight-macOS.dmg || echo "DMG not created"
        else
          echo "No .app bundle found for DMG creation"
          exit 1
        fi
      
    - name: Upload macOS DMG
      uses: actions/upload-artifact@v4
      with:
        name: macos-dmg
        path: dist/*.dmg
        retention-days: 7

  create-source-code-zip:
    needs: check-conditions
    if: needs.check-conditions.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Create source code zip
      run: |
        # Create a directory for the source code
        mkdir -p source-code
        
        # Copy all files except excluded ones
        rsync -av --exclude='.git' --exclude='venv' --exclude='__pycache__' \
              --exclude='build' --exclude='dist' --exclude='logs' \
              --exclude='.DS_Store' --exclude='*.pyc' \
              . source-code/
        
        # Create the zip file
        cd source-code
        zip -r ../SourceCode.zip .
        cd ..
        
        echo "Created source code zip:"
        ls -la SourceCode.zip
    
    - name: Upload source code zip
      uses: actions/upload-artifact@v4
      with:
        name: source-code
        path: SourceCode.zip
        retention-days: 7

  # This job creates a GitHub release with all artifacts when a tag is pushed
  create-release:
    name: Create Release
    needs: [check-conditions, build-windows, build-macos, create-source-code-zip]
    # Run this job if a tag is present or on manual trigger
    if: needs.check-conditions.outputs.has_tag == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags for generating release notes
      
      - name: Extract version
        id: get_version
        run: |
          if [[ "${{ needs.check-conditions.outputs.has_tag }}" == "true" ]]; then
            VERSION="${{ needs.check-conditions.outputs.version }}"
            TAG_VERSION="${{ needs.check-conditions.outputs.tag_name }}"
            IS_DRAFT=false
          else
            VERSION="${{ needs.check-conditions.outputs.version }}"
            TAG_VERSION="build-$VERSION"
            IS_DRAFT=true
          fi
          
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "IS_DRAFT=$IS_DRAFT" >> $GITHUB_OUTPUT
          
      - name: Download all workflow artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
          
      - name: Prepare artifacts for release
        run: |
          mkdir -p release-artifacts
          
          # Rename artifacts with version number
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          
          # Windows executable
          echo "Preparing Windows executable..."
          # Unzip the Windows executable artifact first
          find all-artifacts/windows-exe -name "*.zip" -type f -exec unzip -j {} -d windows-extracted \; || echo "No Windows executable zip found"
          # Then copy the extracted exe to the release artifacts
          find windows-extracted -name "*.exe" -type f -exec cp {} release-artifacts/AstroInsight-${VERSION}.exe \; || {
            # Fallback to direct search in case it wasn't zipped
            find all-artifacts/windows-exe -name "*.exe" -type f -exec cp {} release-artifacts/AstroInsight-${VERSION}.exe \;
          } || echo "No Windows executable found"
          
          # macOS DMG (preferred distribution format for macOS apps)
          echo "Preparing macOS DMG..."
          find all-artifacts/macos-dmg -name "*.dmg" -type f -exec cp {} release-artifacts/AstroInsight-${VERSION}.dmg \; || echo "No macOS DMG found"
          
          # Source code ZIP
          echo "Preparing source code ZIP..."
          find all-artifacts/source-code -name "*.zip" -type f -exec cp {} release-artifacts/SourceCode-${VERSION}.zip \; || echo "No source code ZIP found"
          
          # List what we've collected
          echo "Contents of release-artifacts directory:"
          ls -la release-artifacts/
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: AstroInsight ${{ steps.get_version.outputs.VERSION }}
          tag_name: ${{ steps.get_version.outputs.TAG_VERSION }}
          draft: ${{ steps.get_version.outputs.IS_DRAFT }}
          prerelease: false
          generate_release_notes: true  # Automatically generate notes based on commits
          files: |
            release-artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 