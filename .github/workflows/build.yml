name: build

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual triggering from the GitHub UI

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
      
    - name: Build Windows executable
      run: |
        python build.py --target-platform windows --target-arch x64 --onefile --portable --clean
      
    - name: Create Windows ZIP
      run: |
        cd dist
        powershell Compress-Archive -Path *.exe -DestinationPath AstroInsight-Windows.zip
      
    - name: List build artifacts
      run: |
        echo "Contents of dist directory:"
        dir dist
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: astroinsight-windows
        path: |
          dist/*.exe
          dist/AstroInsight-Windows.zip
        retention-days: 7
  
  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
      
    - name: Print system information
      run: |
        echo "macOS version: $(sw_vers -productVersion)"
        echo "Architecture: $(uname -m)"
        python -c "import platform; print(f'Python architecture: {platform.machine()}')"
      
    - name: Build macOS executable
      run: |
        python build.py --target-platform macos --target-arch auto --portable --clean
      
    - name: Create macOS ZIP
      run: |
        cd dist
        # Find the .app file and zip it
        APP_NAME=$(find . -name "*.app" -type d -maxdepth 1 | head -1)
        if [ -n "$APP_NAME" ]; then
          zip -r AstroInsight-macOS.zip "$APP_NAME"
        else
          echo "No .app file found in dist directory"
          exit 1
        fi
      
    - name: List build artifacts
      run: |
        echo "Contents of dist directory:"
        ls -la dist/
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: astroinsight-macos
        path: |
          dist/*.app
          dist/AstroInsight-macOS.zip
        retention-days: 7

  create-source-code-zip:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Create source code zip
      run: |
        # Create a directory for the source code
        mkdir -p source-code
        
        # Copy all files except excluded ones
        rsync -av --exclude='.git' --exclude='venv' --exclude='__pycache__' \
              --exclude='build' --exclude='dist' --exclude='logs' \
              --exclude='.DS_Store' --exclude='*.pyc' \
              . source-code/
        
        # Create the zip file
        cd source-code
        zip -r ../SourceCode.zip .
        cd ..
        
        echo "Created source code zip:"
        ls -la SourceCode.zip
    
    - name: Upload source code zip
      uses: actions/upload-artifact@v4
      with:
        name: source-code
        path: SourceCode.zip
        retention-days: 7

  # This job creates a GitHub release with all artifacts when a tag is pushed
  create-release:
    name: Create Release
    needs: [build-windows, build-macos, create-source-code-zip]
    # Run this job on both tag pushes and workflow_dispatch (manual triggers)
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags for generating release notes
      
      - name: Extract version
        id: get_version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "TAG_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "IS_DRAFT=false" >> $GITHUB_OUTPUT
          else
            VERSION=$(date +'%Y.%m.%d')
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "TAG_VERSION=build-$VERSION" >> $GITHUB_OUTPUT
            echo "IS_DRAFT=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Download all workflow artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
          
      - name: Prepare artifacts for release
        run: |
          mkdir -p release-artifacts
          
          # Rename artifacts with version number
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          
          # Windows executable
          find all-artifacts/astroinsight-windows -name "*.exe" -type f | head -1 | xargs -I{} cp {} release-artifacts/AstroInsight-${VERSION}.exe || true
          
          # Windows ZIP
          find all-artifacts/astroinsight-windows -name "*.zip" -type f | head -1 | xargs -I{} cp {} release-artifacts/AstroInsight-${VERSION}-Windows.zip || true
          
          # macOS app ZIP
          find all-artifacts/astroinsight-macos -name "*.zip" -type f | head -1 | xargs -I{} cp {} release-artifacts/AstroInsight-${VERSION}-macOS.zip || true
          
          # Source code ZIP
          cp all-artifacts/source-code/SourceCode.zip release-artifacts/SourceCode-${VERSION}.zip || true
          
          # List what we've collected
          echo "Contents of release-artifacts directory:"
          ls -la release-artifacts/
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: AstroInsight ${{ steps.get_version.outputs.VERSION }}
          tag_name: ${{ steps.get_version.outputs.TAG_VERSION }}
          draft: ${{ steps.get_version.outputs.IS_DRAFT }}
          prerelease: false
          generate_release_notes: true  # Automatically generate notes based on commits
          files: |
            release-artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 