name: build

on:
  push:
    branches: [ develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:  # Allows manual triggering from the GitHub UI

jobs:
  # This initial job will determine if the current commit already has a tag
  # to avoid running duplicate workflows
  check-conditions:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      has_tag: ${{ steps.check.outputs.has_tag }}
      tag_name: ${{ steps.check.outputs.tag_name }}
      version: ${{ steps.check.outputs.version }}
      is_develop: ${{ steps.check.outputs.is_develop }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history to properly check tags
    
    - name: Check if we should run this workflow
      id: check
      run: |
        # Check if this is a develop branch build
        IS_DEVELOP=false
        if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          IS_DEVELOP=true
        fi
        echo "is_develop=$IS_DEVELOP" >> $GITHUB_OUTPUT
        
        # If this is a pull request or manual trigger, always run
        if [[ "${{ github.event_name }}" == "pull_request" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "has_tag=false" >> $GITHUB_OUTPUT
          echo "tag_name=" >> $GITHUB_OUTPUT
          echo "version=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # If this is a tag push directly, always run
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "has_tag=true" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # If this is a develop branch push, we should run the workflow
        if [[ "$IS_DEVELOP" == "true" ]]; then
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "has_tag=false" >> $GITHUB_OUTPUT
          echo "tag_name=" >> $GITHUB_OUTPUT
          echo "version=$(date +'%Y.%m.%d')-dev" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # If this is a branch push (master/main), check if this commit already has a tag
        COMMIT_SHA="${{ github.sha }}"
        TAG_AT_COMMIT=$(git tag --points-at $COMMIT_SHA)
        
        if [[ -n "$TAG_AT_COMMIT" && "$TAG_AT_COMMIT" == v* ]]; then
          # This commit already has a version tag - should only build in response to the tag
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "has_tag=true" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_AT_COMMIT" >> $GITHUB_OUTPUT
          echo "version=${TAG_AT_COMMIT#v}" >> $GITHUB_OUTPUT
        else
          # No tag, and it's not develop branch - we should NOT run the workflow
          echo "should_run=false" >> $GITHUB_OUTPUT
          echo "has_tag=false" >> $GITHUB_OUTPUT
          echo "tag_name=" >> $GITHUB_OUTPUT
          echo "version=0.0.0" >> $GITHUB_OUTPUT
        fi

  create-source-code-zip:
    name: Create Source Code Package
    needs: check-conditions
    if: needs.check-conditions.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Create source code zip
      run: |
        # Create a directory for the source code
        mkdir -p source-code
        
        # Copy all files except excluded ones
        rsync -av --exclude='.git' --exclude='venv' --exclude='__pycache__' \
              --exclude='build' --exclude='dist' --exclude='logs' \
              --exclude='.DS_Store' --exclude='*.pyc' \
              . source-code/
        
        # Create the zip file
        cd source-code
        zip -r ../KPAstrologyDashboard-${{ needs.check-conditions.outputs.version }}.zip .
        cd ..
        
        echo "Created source code zip:"
        ls -la KPAstrologyDashboard-${{ needs.check-conditions.outputs.version }}.zip
    
    - name: Upload source code zip
      uses: actions/upload-artifact@v4
      with:
        name: source-code
        path: KPAstrologyDashboard-${{ needs.check-conditions.outputs.version }}.zip
        retention-days: 7
        
  prepare-installers:
    name: Prepare Installation Scripts
    needs: check-conditions
    if: needs.check-conditions.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Update installation scripts with correct version
      run: |
        # Get the version
        VERSION="${{ needs.check-conditions.outputs.version }}"
        
        # Update the Windows script with the version
        sed -i "s/##VERSION##/$VERSION/g" install_windows.bat
        
        # Update the macOS script with the version
        sed -i "s/##VERSION##/$VERSION/g" install_macos.sh
        
        # Make macOS script executable
        chmod +x install_macos.sh
    
    - name: Upload Windows installer
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: install_windows.bat
        retention-days: 7
        
    - name: Upload macOS installer
      uses: actions/upload-artifact@v4
      with:
        name: macos-installer
        path: install_macos.sh
        retention-days: 7

  build-windows-executable:
    name: Build Windows Executable
    needs: check-conditions
    if: needs.check-conditions.outputs.should_run == 'true'
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Ensure icon directory exists
      shell: pwsh
      run: |
        New-Item -Path "resources/icons" -ItemType Directory -Force
        if (Test-Path "resources/favicon.ico" -PathType Leaf) {
          if (-not (Test-Path "resources/icons/app_icon.ico" -PathType Leaf)) {
            Write-Host "Copying favicon.ico to resources/icons/app_icon.ico"
            Copy-Item "resources/favicon.ico" -Destination "resources/icons/app_icon.ico"
          }
        }
        
    - name: Set version environment variable
      run: |
        echo "CI_VERSION=${{ needs.check-conditions.outputs.version }}" >> $env:GITHUB_ENV
        
    - name: Build Windows executable
      run: |
        python tools/build_windows_exe.py --onefile
        
    - name: Upload Windows executable
      uses: actions/upload-artifact@v4
      with:
        name: windows-executable
        path: dist/KPAstrologyDashboard-${{ needs.check-conditions.outputs.version }}.exe
        retention-days: 7
        
    - name: Upload Windows executable ZIP
      uses: actions/upload-artifact@v4
      with:
        name: windows-executable-zip
        path: dist/KPAstrologyDashboard-${{ needs.check-conditions.outputs.version }}-Windows.zip
        retention-days: 7

  # This job creates a GitHub release with all artifacts when a tag is pushed
  create-release:
    name: Create Release
    needs: [check-conditions, create-source-code-zip, prepare-installers, build-windows-executable]
    # Run this job if a tag is present or on manual trigger, but not for develop branch
    if: (needs.check-conditions.outputs.has_tag == 'true' || github.event_name == 'workflow_dispatch') && needs.check-conditions.outputs.is_develop != 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags for generating release notes
      
      - name: Download all workflow artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
          
      - name: Prepare artifacts for release
        run: |
          mkdir -p release-artifacts
          
          # Rename artifacts with version number
          VERSION="${{ needs.check-conditions.outputs.version }}"
          
          # Source code ZIP
          echo "Preparing source code ZIP..."
          find all-artifacts/source-code -name "*.zip" -type f -exec cp {} release-artifacts/KPAstrologyDashboard-${VERSION}.zip \; || echo "No source code ZIP found"
          
          # Installer scripts
          echo "Preparing installer scripts..."
          find all-artifacts/windows-installer -name "*.bat" -type f -exec cp {} release-artifacts/KPAstrologyDashboard-Windows-Installer.bat \; || echo "No Windows installer found"
          find all-artifacts/macos-installer -name "*.sh" -type f -exec cp {} release-artifacts/KPAstrologyDashboard-macOS-Installer.sh \; || echo "No macOS installer found"
          chmod +x release-artifacts/KPAstrologyDashboard-macOS-Installer.sh
          
          # Windows executable
          echo "Preparing Windows executable..."
          find all-artifacts/windows-executable -name "*.exe" -type f -exec cp {} release-artifacts/KPAstrologyDashboard-${VERSION}.exe \; || echo "No Windows executable found"
          find all-artifacts/windows-executable-zip -name "*.zip" -type f -exec cp {} release-artifacts/KPAstrologyDashboard-${VERSION}-Windows.zip \; || echo "No Windows executable ZIP found"
          
          # Create a macOS .command file (which is double-clickable)
          echo "Creating double-clickable macOS installer..."
          if [ -f "release-artifacts/KPAstrologyDashboard-macOS-Installer.sh" ]; then
            cp release-artifacts/KPAstrologyDashboard-macOS-Installer.sh release-artifacts/KPAstrologyDashboard-macOS-Installer.command
            chmod +x release-artifacts/KPAstrologyDashboard-macOS-Installer.command
            echo "Created double-clickable macOS installer: KPAstrologyDashboard-macOS-Installer.command"
          else
            echo "No macOS installer found, skipping .command file creation"
          fi
          
          # List what we've collected
          echo "Contents of release-artifacts directory:"
          ls -la release-artifacts/
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: KP Astrology Dashboard ${{ needs.check-conditions.outputs.version }}
          tag_name: ${{ needs.check-conditions.outputs.tag_name }}
          draft: ${{ needs.check-conditions.outputs.has_tag != 'true' }}
          prerelease: false
          generate_release_notes: true  # Automatically generate notes based on commits
          files: |
            release-artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 